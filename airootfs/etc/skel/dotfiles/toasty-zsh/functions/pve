function pve {
    [ -n "$ZSH_VERSION" ] && emulate -L sh

    # the virtualenv basically goes into $usedir/$dname
    delete=
    dname=
    usedir=~/.venv

    while getopts dlp:s flag
    do
        case $flag in
        d) delete=1;;
        l) usedir="$PWD"
           dname="env";;
        p) usedir="$OPTARG";;
        s) dname="$(basename $PWD)";;
        ?) printf 'Usage: %s: [-d custom_directory] [-l | -s | venv name]' $0
           return 2;;
        esac
    done

    shift $(($OPTIND -1))
    # if you're not specifying a name, you must use -l or -s
    [ -z "$dname" ] && [ "$#" -eq 0 ] && echo "You must specify a name or use -l or -s." && return 1

    hasname="$#"
    while [ "$hasname" -gt 1 ]; do
        shift
        hasname="$#"
    done
    [ "$hasname" -gt 0 ] && dname="$1"

    pth="$usedir/$dname"

    # deactivate DOES unset VIRTUAL_ENV on my setup
    # cases of manually calling the binary from the prefix are not supported
    [ ! -z "$VIRTUAL_ENV" ] && deactivate # leave current virtualenv

    if [ ! -z "$delete" ]
    then
        [ -d "$pth" ] && rm -r "$pth"
        return 0
    fi

    [ ! -d "$pth" ] && mkdir -p "$pth"
    [ ! -f "$pth/bin/activate" ] && virtualenv "$pth" # create if not already there
    . "$pth/bin/activate"
    return 0
}

# vim: ft=sh
